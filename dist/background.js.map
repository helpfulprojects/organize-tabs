{"version":3,"file":"background.js","mappings":"8DAeAA,OAAOC,QAAQC,YAAYC,aAAY,EAAGC,aACzB,YAAXA,GACFJ,OAAOK,QAAQC,MAAMC,IAAI,CACvBC,YAAa,IAEjB,IAsBFR,OAAOS,KAAKC,cAAcP,aAAaQ,IACrC,MAAMC,EAASD,EAAcC,OACR,GAAjBA,EAAOC,QAGGD,EAAO,EAAE,G,GC9CrBE,EAA2B,CAAC,GAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUM,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAGpEK,EAAOD,OACf,CCtBA,K","sources":["webpack://organise-tabs/./src/listen-to-tabs.ts","webpack://organise-tabs/webpack/bootstrap","webpack://organise-tabs/./src/service-worker.ts"],"sourcesContent":["type Graph = {\r\n  [node: string]: {\r\n      [neighbor: string]: number; \r\n  };\r\n};\r\n\r\n// chrome.runtime.onInstalled.addListener(({ reason }) => {\r\n//   if (reason === \"install\") {\r\n//     chrome.storage.local.set({\r\n//       lastHighlight: null,\r\n//       graph: {},\r\n//     });\r\n//   }\r\n// });\r\n\r\nchrome.runtime.onInstalled.addListener(({ reason }) => {\r\n  if (reason === \"install\") {\r\n    chrome.storage.local.set({\r\n      watchedTabs: [],\r\n    });\r\n  }\r\n});\r\nfunction addEdge(graph: Graph, node1: string, node2: string, weight: number) {\r\n  if (!graph[node1]) {\r\n    graph[node1] = {};\r\n    if (!graph[node2]) {\r\n      graph[node2] = {};\r\n    }\r\n    graph[node1][node2] = weight;\r\n    graph[node2][node1] = weight;\r\n  }\r\n}\r\n// chrome.tabs.onCreated.addListener(async (tab) => {\r\n//   await addTabId(tab.id);\r\n//   console.log(await getWatchedTabs());\r\n// });\r\n\r\n// chrome.tabs.onRemoved.addListener(async (tabId) => {\r\n//   await removeTabId(tabId);\r\n//   console.log(await getWatchedTabs());\r\n// });\r\n\r\nchrome.tabs.onHighlighted.addListener((highlightInfo) => {\r\n  const tabIds = highlightInfo.tabIds;\r\n  if (tabIds.length != 1) {\r\n    return;\r\n  }\r\n  const tabId = tabIds[0];\r\n});\r\n\r\nasync function addTabId(addTabId:number) {\r\n  const { watchedTabs } = await chrome.storage.local.get(\"watchedTabs\");\r\n  watchedTabs.push(addTabId);\r\n  return chrome.storage.local.set({ watchedTabs });\r\n}\r\n\r\nasync function removeTabId(removeTabId:number) {\r\n  const { watchedTabs } = await chrome.storage.local.get(\"watchedTabs\");\r\n  watchedTabs.filter((tabId:number) => tabId !== removeTabId);\r\n  return chrome.storage.local.set({ watchedTabs });\r\n}\r\n\r\nasync function isTabWatched(tabId:number) {\r\n  const { watchedTabs } = await chrome.storage.local.get(\"watchedTabs\");\r\n  return watchedTabs.includes(tabId);\r\n}\r\n\r\nasync function getWatchedTabs() {\r\n  const { watchedTabs } = await chrome.storage.local.get(\"watchedTabs\");\r\n  return watchedTabs;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import \"./listen-to-tabs\";\r\n"],"names":["chrome","runtime","onInstalled","addListener","reason","storage","local","set","watchedTabs","tabs","onHighlighted","highlightInfo","tabIds","length","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"sourceRoot":""}